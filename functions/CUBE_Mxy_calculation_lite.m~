 % ===== Set the parameters ======
 function [Mxy_at_echo_time, echo_time] = CUBE_Mxy_calculation_lite(T1, T2, TEes, ETL)
    
% =============== Tissue properties ====================
    
%     T1 = 600;        % ms.
%     T2 = 30;        % ms.
    nsp = 600;         % number of spins with different random off-resonance freqs
    df0 = 1;         % df0=1 will only display the results for one on resonance spin


% ===============  Sequence Properties =================
    
%     TEes = 4;          % ms, repetition time of FSPGR
%     ETL = 64;        % number of inversions
    TRec = 50;      % time to wait after echotrains
    nET = 1;         % number of echo trains
    invfa = 180;     % degree, flip angle inversion
    spoilpart = 0;   % [0 1],  0=perfect spoiling, 1=no spoiling, spoiling after echo train before next inversion.


    % ===== Get the Propagation Matrices ======


    %calculate the off resonance frequencies [Hz]
    df = 1300*(rand(1,nsp)-0.5);  

    if df0
        df=0;
    end

    if size(df,2)==1
        df=[df df];
    end

    for fr=1:size(df,2) %free precession matrices for different dfs
        [K(fr,:,:),L(fr,:,:)] = freeprecess(1,T1,T2,df(fr));
    end

    invrot = xrot(invfa*2*pi/360);
    excrot = yrot(90*2*pi/360);


    spoil = xyspoil(spoilpart);

    % Get the flipangles for CUBE
    angles=CUBEangles(T1,T2,TEes,0.24,ETL);

%     angdeg=angles*180/pi;
    
    % plot(1:length(angdeg),angdeg)

    %OVERRULL the FA here. 
    
%     angles = pi * ones(1,ETL);


%     angg = [134.5000    79.0000   58.1300   51.2500   51.2500   55.2900   62.1400   72.1400   86.7000  110.2800  120.0000  122.1100  124.2100  126.3200  128.4200  130.5300  132.6300  134.7400  136.8400  138.9500  141.0500  143.1600  145.2600  147.3700  149.4700  151.5800  153.6800  155.7900  157.8900  160.0000];
    % angg=[160 140 145 150 155 160:-4:20 20:4:160]
    % angg=[160 150 130 110 130 145 150 155 160:-4:30 28 27 25 24 22 21 20 21 22 22 23 24 25 26 28 30:4:120 126:6:160]
    % angg = [160 147 156 164 168 173 177 180*ones(1,121)];
    % plot(1:length(angg),angg)
%     angles = angg*pi/180;
    
    
    assert(length(angles)==ETL); %want same number of bvals as T1vals (= number of phantoms)

    % ===== Simulate the Decay ======

    TR = ETL*TEes+TRec;  % time until next excitation
    TEs= [];

   
    
    [Mxy_at_echo_time,m_long,FZall] = epg_forward(angg,30,3*ones(1,30),1000,50,1);
    
    

    Mxy_at_echo_time = meanMxyMag(uTEs); 
    echo_time = uTEs;
    
    figure(401);
    plot(angles);
 end

    
    